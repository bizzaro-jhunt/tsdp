#!/usr/bin/perl
use strict;
use warnings;

my $rc = 0;
sub ok($) {
	print "ok ", $_[0], "\n";
}
sub notok($) {
	print "not ok ", $_[0], "\n";
	$rc = 1;
}

# some singleton base cases
chomp(my $out = qx(./t/contract/r/qname-base 2>&1));
my $exit = $? >> 8;
if ($exit == 0) {
	ok "base qname tests hold";
} else {
	notok "base qname tests failed";
	print "$out\n";
	exit 1;
}

while (<DATA>) {
	chomp;
	s/\s*#\s*(.*)//;
	my $comment = $1 ? "$1 - " : "";
	my ($test) = m/([a-z]+)\s/ or next;
	$comment = "[$test] $comment";

	if ($test eq 'string') {
		my ($in, $want) = m/$test\s+(.*?)\s+>>\s+(.*)/;
		$in   =~ s|\\|\\\\|g; # avoid premature unescapes.
		$in   =~ s|[:/]| |;   # metric/tags -> 'metric tags'
		$want =~ s|[:/]| |;   # metric:tags -> 'metric tags'
		chomp(my $out = qx(echo '$in' | ./t/contract/r/qname-string 2>&1));
		if ($out ne $want) {
			notok "${comment}[$in] did not yield [$want] (was [$out])";
		} else {
			chomp(my $out = qx(echo '$in' | ./t/contract/r/qname-dup 2>&1));
			if ($out ne $want) {
				notok "${comment}[$in] did not (DUP) yield [$want] (was [$out])";
			} else {
				ok "${comment}[$in] yields [$want]";
			}
		}

	} elsif ($test =~ m/^(equiv|match)$/) {
		my ($a, $rel, $b) = m/$test\s+(.*?)\s+([~!])\s+(.*)/;
		$a =~ s|[:/]| |; # metric/tags -> 'metric tags'
		$b =~ s|[:/]| |; # metric:tags -> 'metric tags'
		chomp(my $err = qx(./t/contract/r/qname-${test} '$a' '$rel' '$b' </dev/null 2>&1));
		my $exit = $? >> 8;
		if ($exit == 0) {
			ok "${comment}$a $rel $b holds";
		} elsif ($exit == 1) {
			notok "${comment}$a $rel $b does not hold";
		} else {
			notok "${comment}$a $rel $b does not hold (rc=$exit; err=$err)";
		}

	} elsif ($test eq 'max') {
		my ($len, $ok) = m/$test\s+(\d+)\s+(ok|fail)/;
		for my $slug (qw(a$_=$_ k$_ w$_=*)) {
			my $s = join(',', map { eval "\"$slug\"" } 1..$len);
			chomp(my $err = qx(./t/contract/r/qname-${test} 'thing $s' </dev/null 2>&1));
			my $exit = $? >> 8;
			if ($exit == 0) {
				if ($ok eq 'ok') {
					notok "${comment}$len ($slug) pairs was too long (and should be fine)"
				} else {
					ok "${comment}$len ($slug) pairs is too long (as it should be)"
				}
			} else {
				if ($ok eq 'ok') {
					ok "${comment}$len ($slug) pairs is not too long (that's correct)"
				} else {
					notok "${comment}$len ($slug) pairs is not too long (rc=$exit; err=$err)";
				}
			}
		}

	} elsif ($test eq 'get') {
		my ($qn, $k, $want) = m/$test\s+(\S+)\s+(\S+)\s+(\S+)/;
		$qn   =~ s|[:/]| |; # metric/tags -> 'metric tags'
		$want =~ s|[:/]| |; # metric:tags -> 'metric tags'
		$want = "$want / $want";
		chomp(my $out = qx(./t/contract/r/qname-$test '$qn' '$k' 2>&1));
		if ($out ne $want) {
			notok "${comment} ($qn)->[$k] did not yield [$want] (was [$out])";
		} else {
			ok "$comment ($qn)->[$k] yields [$want]";
		}

	} elsif ($test eq 'set') {
		my ($qn, $k, $v, $want) = m/$test\s+(\S+)\s+(\S+)=(\S+)\s+(\S+)/;
		$qn   =~ s|[:/]| |; # metric/tags -> 'metric tags'
		$want =~ s|[:/]| |; # metric:tags -> 'metric tags'
		$want = "$want / $want";
		chomp(my $out = qx(./t/contract/r/qname-$test '$qn' '$k' '$v' 2>&1));
		if ($out ne $want) {
			notok "${comment} ($qn)->[$k]='$v' did not yield [$want] (was [$out])";
		} else {
			ok "$comment ($qn)->[$k]='$v' yields [$want]";
		}

	} elsif ($test eq 'unset') {
		my ($qn, $k, $want) = m/$test\s+(\S+)\s+(\S+)\s+(\S+)/;
		$qn   =~ s|[:/]| |; # metric/tags -> 'metric tags'
		$want =~ s|[:/]| |; # metric:tags -> 'metric tags'
		$want = "$want / $want";
		chomp(my $out = qx(./t/contract/r/qname-$test '$qn' '$k' 2>&1));
		if ($out ne $want) {
			notok "${comment} ($qn) w/o [$k] did not yield [$want] (was [$out])";
		} else {
			ok "$comment ($qn) w/o [$k] yields [$want]";
		}

	} elsif ($test eq 'merge') {
		my ($a, $b, $want) = m/$test\s+(\S+)\s+(\S+)\s+(\S+)/;
		$a    =~ s|[:/]| |; # metric/tags -> 'metric tags'
		$b    =~ s|[:/]| |; # metric:tags -> 'metric tags'
		$want =~ s|[:/]| |; # metric:tags -> 'metric tags'
		$want = "$want / $want";
		chomp(my $out = qx(./t/contract/r/qname-$test '$a' '$b' 2>&1));
		if ($out ne $want) {
			notok "${comment} ($a) + ($b) did not yield [$want] (was [$out])";
		} else {
			ok "$comment ($a) + ($b) yields [$want]";
		}

	} else {
		notok "invalid test: ${test}"
	}
}
exit $rc;

__DATA__
string cpu/a=b       >> cpu/a=b        # base case
string cpu/abc=d     >> cpu/abc=d      # multi-character key
string cpu/a=def     >> cpu/a=def      # multi-character value
string cpu/abc=def   >> cpu/abc=def    # multi-character key and value
string cpu/a=b,c=d   >> cpu/a=b,c=d    # compound case (pre-ordered)
string cpu/c=d,a=b   >> cpu/a=b,c=d    # compound case re-ordered
string cpu/*         >> cpu/*          # single wildcard
string cpu/a=*       >> cpu/a=*        # partial match
string cpu/a=*,c=d   >> cpu/a=*,c=d    # interior partial match
string cpu/a=b,*     >> cpu/a=b,*      # trailing wildcard
string cpu/a = b     >> cpu/a=b        # key/value delimiter whitespace
string cpu/a   =  b  >> cpu/a=b        # repeated whitespace
string cpu/a=b , c=d >> cpu/a=b,c=d    # pair delimiter whitespace
string cpu/a=b c,d=e >> cpu/a=b c,d=e  # whitespace preservation
string cpu/a=\b      >> cpu/a=b        # non-escape pass-through (values)
string cpu/\a=\b     >> cpu/a=b        # non-escape pass-through (keys)
string cpu/a=b\ c    >> cpu/a=b c      # whitespace escaped
string cpu/yes=no    >> cpu/yes=no     # multi-char keys / values
string cpu/set       >> cpu/set        # omitted value eof
string cpu/a=,b      >> cpu/a,b        # omitted value=
string cpu/a,b       >> cpu/a,b        # omitted value,

equiv <nil>       ! <nil>              # nil/nil inequality
equiv <nil>       ! cpu/a=b            # nil/!nil inequality
equiv cpu/a=b     ! <nil>              # !nil/nil inequality
equiv cpu/a=b     ~ cpu/a=b            # base case
equiv cpu/a=b,c=d ~ cpu/a=b,c=d        # multiple keys
equiv cpu/a=b,c=  ~ cpu/a=b,c=         # missing value (symmetric)
equiv cpu/a=b     ! cpu/a=c            # negative base case (values)
equiv cpu/a=b     ! cpu/c=b            # negative base case (keys)
equiv cpu/a=b     ! cpu/a=             # missing value
equiv cpu/a=b,c=d ! cpu/a=b            # arity mismatch
equiv cpu/a=b,*   ! cpu/a=b            # wildcard mismatch
equiv cpu/a=b,*   ~ cpu/a=b,*          # wildcard equality
equiv cpu/a=b     ! mem/a=b            # metric name equality

match <nil>       ! <nil>              # nil/nil mismatch
match <nil>       ! cpu/a=b            # nil/!nil mismatch
match cpu/a=b     ! <nil>              # !nil/nil mismatch
match cpu/a=b     ~ cpu/a=b            # literal match
match cpu/a=b     ~ cpu/a=*            # partial match
match cpu/a=b,c=d ~ cpu/a=*,c=d        # interior partial match
match cpu/a=b,c=d ~ cpu/a=b,*          # wildcard match
match cpu/a=b,c=d ~ cpu/a=*,*          # wildcard + partial match
match cpu/a=b,c=  ~ cpu/a=b,c=         # missing value (symmetric)
match cpu/a=b,c=d ! cpu/a=*            # partial match scope
match cpu/a=b     ! cpu/a=c            # value mismatch
match cpu/a=b     ! cpu/a=             # missing value
match cpu/a=b     ! cpu/c=d            # key mismatch
match cpu/a=b     ! cpu/c=d,*          # pattern constraint
match cpu/a=b     ~ cpu/a=b,*          # superfluous wildcard
match cpu/a=b,c=d ! cpu/a=b            # arity mismatch
match cpu/a=b     ! mem/a=*            # metric name mismatch
match cpu/a=b     ! mem/a=b            # metric name mismatch

max 1 ok
max 64 ok
max 65 fail
max 66 fail
max 128 fail

get cpu/key=value  key value        # simple get
get cpu/a=b,c=d    c   d            # multi-key get
get cpu/a=b,c=d    e   ~            # get of non-existent

set cpu/a=b      c=d   cpu/a=b,c=d      # append key/value pair
set cpu/a=b,c=d  a=d   cpu/a=d,c=d      # update multi-value
set cpu/a=b      a=c   cpu/a=c          # update single value
set cpu/a=b,c=   c=d   cpu/a=b,c=d      # update empty key
set cpu/a=1      a=one cpu/a=one        # expand value size

unset cpu/a=b      c     cpu/a=b        # unset non-existent key
unset cpu/a=b,c=d  a     cpu/c=d        # unset last key
unset cpu/a=b,c=d  c     cpu/a=b        # unset first key
unset cpu/a=b,c=   c     cpu/a=b        # unset empty key


merge cpu/a=b     cpu/a=b cpu/a=b           # identity merge
merge cpu/a=b     cpu/c=d cpu/a=b,c=d       # append merge
merge cpu/a=b,c=d cpu/c=e cpu/a=b,c=e       # override merge
