#!/usr/bin/perl
use strict;
use warnings;
use File::Temp qw/tempdir/;

my $rc = 0;
sub ok($) {
	print "ok ", $_[0], "\n";
}
sub notok($) {
	print "not ok ", $_[0], "\n";
	$rc = 1;
}

sub str2hex($) {
	my $x = '';
	for (split //, $_[0]) {
		$x .= sprintf "%02x", ord($_);
	}
	$x .= '00';
	return $x;
}

sub hexify($) {
	$_[0] =~ s/\((.*?)\)/str2hex($1)/eg;
	$_[0] =~ s/\s+//g;
	return pack("H*", $_[0]);
}
sub from($$) {
	my ($start, $end) = @_;
	$start = 0 if $ENV{FUZZ_COMPLETELY};
	return [$start .. $end];
}

my %FRAMES = (
	uint2  => "0 002 2468",
	uint4  => "0 004 1234 5678",
	uint8  => "0 008 0102 0304 0506 0708",

	float4 => "1 004 4048 f5c3",            # 3.14
	float8 => "1 008 4019 1eb8 51eb 851f",  # 6.28

	string => "2 00e (Hello, World!)",

	tstamp => "6 008 0011 2233 4455 6677",

	nil    => "7 000",
);
sub frames {
	return @_ unless @_;
	my @f = reverse map { $FRAMES{$_} } @_;
	$f[0] =~ s/^(.)/sprintf("%01x", $1+0+8)/e;
	return reverse @f;
}

my $WORKSPACE = tempdir(CLEANUP => 1);
sub bogon($$$@) {
	my ($test, $header, $range, @blacklist) = @_;
	my @types = keys(%FRAMES);

	# generate tests for our range of frame numbers.
	for my $n (@$range) {

		# range over the number of different permutations
		# that can be (with repetition), given as t^n
		my $N = @types ** $n;
		print "$test -- $N cases to consider\n";

CASE:
		for (my $c = 0 ; $c < $N; $c++) {
			my ($i, @f) = ($c);

			# populate each frame entry in our list
			for (my $j = 0; $j < $n; $j++) {
				push(@f, $types[$i % @types]);
				$i /= @types;
			}

			# skip the test if this frame list happens to
			# match the valid frame signature.
			for (@blacklist) {
				next CASE if $_ eq join(',', @f);
			}

			my $in = join("\n", $header, frames(@f));
			open my $fh, ">", "$WORKSPACE/in"; print $fh hexify($in); close $fh;
			my $out = qx(./t/fuzz/r/msg <$WORKSPACE/in 2>&1);

			my $sig = join(', ', @f);
			print "." if $c % 32 == 0;
			if ($out) {
				print "\n";
				notok "${test} [$sig] - bogon slipped past validation!";
				print "$out\n";
			}
		}
		print "\n";
	}
}

bogon "HEARTBEAT",
      "1 0 00 0000",
      from(1, 3),
      "tstamp,uint8";

bogon "SUBMIT SAMPLE",
      "1 1 00 0001",
      from(2, 4),
      "string,tstamp,float8",
      "string,tstamp,float8,float8";

bogon "SUBMIT TALLY",
      "1 1 00 0002",
      from(1, 4),
      "string,tstamp",
      "string,tstamp,uint8";

bogon "SUBMIT DELTA",
      "1 1 00 0004",
      from(2, 4),
      "string,tstamp,float8";

bogon "SUBMIT STATE",
      "1 1 00 0008",
      from(2, 5),
      "string,tstamp,uint4",
      "string,tstamp,uint4,string";

bogon "SUBMIT EVENT",
      "1 1 00 0010",
      from(2, 4),
      "string,tstamp,string";

bogon "SUBMIT FACT",
      "1 1 00 0020",
      from(1, 3),
      "string,string";

bogon "BROADCAST SAMPLE",
      "1 2 00 0001",
      from(8, 10),
      "string,tstamp,uint4,uint2,float8,float8,float8,float8,float8"
        if $ENV{FUZZ_MOSTLY};

bogon "BROADCAST TALLY",
      "1 2 00 0002",
      from(3, 5),
      "string,tstamp,uint4,uint8";

bogon "BROADCAST DELTA",
      "1 2 00 0004",
      from(3, 5),
      "string,tstamp,uint4,float8";

bogon "BROADCAST STATE (regular)",
      "1 2 00 0008",
      from(3, 5),
      "string,uint4,tstamp,string";

bogon "BROADCAST STATE (transition)",
      "1 2 00 7008",
      from(5, 7),
      "string,uint4,tstamp,string,tstamp,string"
        if $ENV{FUZZ_MOSTLY};

bogon "BROADCAST EVENT",
      "1 2 00 0010",
      from(2, 4),
      "string,tstamp,string";

bogon "BROADCAST FACT",
      "1 2 00 0020",
      from(1, 3),
      "string,string";

bogon "FORGET",
      "1 3 00 0007",
      from(0, 2),
      "string";

# REPLAY has no frames, so it cannot be
#        tested with this harness (yet).

bogon "SUBSCRIBE",
      "1 5 00 0007",
      from(0, 2),
      "string";

exit $rc;
